1.1 연립방정식과 행렬

예제1. 연립방정식 
			2x1 + x2 = 5,
			 x1 - 3x2 = -1
의 해를 구하라

2x1 + x2 = 5
2(x1 - 3x2) = 2*(-1) -> 2x1 - 6x2 = -2
(2x1 + x2) - (2x1 - 6x2) = 7x2 = 7
고로 x2  = 1
2x1 + 1 = 5 이므로 x1 = 2
답 : x1 = 2, x2 = 1

python 코드
import numpy as np
A = np.array([[2, 1], [1, -3]])
B = np.array([5, -1])
X = np.linalg.solve(A, B)
 print(A)
[[ 2  1]
 [ 1 -3]]
print(B)
[ 5 -1]
print(X)
[2. 1.]

위 식의 해는 연립방정식의 유일한 해가 된다. 하지만 모든 연립방정식의 해가 유일하게 존재하는 것은 아니다. 예를들어
			 x1 - 3x2 = 5,
			2x1 - 6x2 = -1
은 첫 번째 방정식에 실수 2를 곱하면 2x1 - 6x2 = 10이 되고 두 번째 방정식에 의해 10 = -1을 만족해야 하므로 연립방정식의 해가 존재하지 않는다.

A = np.array([[1, -3], [2, -6]])
B = np.array([5, -1])
X = np.linalg.solve(A, B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 6, in solve
  File "C:\Users\user\miniconda3\lib\site-packages\numpy\linalg\linalg.py", line 399, in solve
    r = gufunc(a, b, signature=signature, extobj=extobj)
  File "C:\Users\user\miniconda3\lib\site-packages\numpy\linalg\linalg.py", line 97, in _raise_linalgerror_singular
    raise LinAlgError("Singular matrix")
numpy.linalg.LinAlgError: Singular matrix
해가 존재하지 않으므로 에러가 발생한다.

또한 연립방정식
			 x1 - 3x2 = 1,
			2x1 - 6x2 = 2
은 첫 번째 방정식에 실수 2를 곱하면 두 번째 방정식이며 결국 연립방정식의 해는 방정식 x1 - 3x2 = 1을 만족하는 모든 x1, x2가 된다. 즉, 무수히 많은 해가 존재한다.

>>> A = np.array([[1, -3], [2, -6]])
>>> B = np.array([1, 2])
>>> X = np.linalg.solve(A, B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 6, in solve
  File "C:\Users\user\miniconda3\lib\site-packages\numpy\linalg\linalg.py", line 399, in solve
    r = gufunc(a, b, signature=signature, extobj=extobj)
  File "C:\Users\user\miniconda3\lib\site-packages\numpy\linalg\linalg.py", line 97, in _raise_linalgerror_singular
    raise LinAlgError("Singular matrix")
numpy.linalg.LinAlgError: Singular matrix
무수히 많은 해가 존재하므로 에러가 발생한다.

예제 2. 연립방정식
			 x1 -  x2 + 2x3 -  x4 = -1
			2x1 +  x2 - 3x3 - 4x4 = -2
			-x1 - 5x2 +  x3 -  x4 = -7
의 계수행렬, 상수행렬, 첨가계수행렬을 구하여라
계수 행렬 A = [ 1 -1 2 -1
	       2 1 -3 -4
	      -1 -5 1 -1]

상수 행렬 B = [-1 -2 -7]

첨가계수행렬 C = [1 -1 2 -1 -1
	        2 1 -3 -4 -2]
	       -1 -5 1 -1 -7]이다

python
import numpy as np
>>> A = np.array([[1, -1, 2, -1], [2, 1, -3, -4], [-1, -5, 1, -1]])
>>> print(A)
[[ 1 -1  2 -1]
 [ 2  1 -3 -4]
 [-1 -5  1 -1]]
>>> B = np.array([-1, -2, -7])
>>> print(B)
[-1 -2 -7]
>>> C = np.array([[1, -1, 2, -1, -1], [2, 1, -3, -4, -2], [-1, -5, 1, -1, -7]])
>>> print(C)
[[ 1 -1  2 -1 -1]
 [ 2  1 -3 -4 -2]
 [-1 -5  1 -1 -7]]

예제 3. 연립방정식 
			6x1 - 4x2 + 2x3  = 9
			4x1 + 2x2 +  x3  = 2
			2x1 -  x2 +  x3  = 2
의 해를 첨가계수행렬에 후진대입법을 이용하여 구하여라

위의 연립방정식의 첨가계수행렬은
[6, -4, 2 9
 4, 2, 1, 2
 2, -1, 1, 2]이다.
첫번째 열의 계수 값중 0이 아닌 가장 작은 수는 3행이다. 그러므로 1행과 3행을 교환한다. R1 <->R3
[2, -1, 1, 2
4, 2, 1, 2
6, -4, 2 9]
그 뒤, R2-2R1과 R3-3R1을 행한다. 그럼
[2, -1, 1, 2
0, 4, -1, -2
0, -1, -1 3]이 된다.
그 뒤, 두번째 열의 계수 중 0이 아닌 가장 작은 수는 3행이다. 그러므로 2행과 3행을 교환한다. R2<->R3
[2, -1, 1, 2
0, -1, -1 3
0, 4, -1, -2]
그리고 R3+4R2를 행하면,
[2, -1, 1, 2
0, -1, -1 3
0, 0, -5, 10]이 된다. 마지막으로 R3/(-5)를 하면

[2, -1, 1, 2
0, -1, -1 3
0, 0, 1, -2]가 된다. 이 식을 연립방정식으로 나타내면

			   2x1 - x2 + x3  = 2
			     -x2 +  -x3  = 3
			 	      x3  = -2
이 된다. 고로 x3  = -2, x2   =-1, x1 = 3/2가 된다.
